{"version":3,"file":"smsc.stat.js","sourceRoot":"","sources":["smsc.stat.ts"],"names":[],"mappings":"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","sourcesContent":["import * as xml2js from 'xml2js';\nimport * as Bluebird from 'bluebird';\nimport * as _ from 'lodash'\nimport request = require('request-promise');\nBluebird.promisifyAll(xml2js);\n// import * as Promise from 'bluebird';\n\nexport interface SMSCStat {\n    smsOutboundRate: number;\n    smsInboundRate: number;\n    dlrOutboundRate: number;\n    dlrInboundRate: number;\n    bindsOnline: number;\n    queueLength: number;\n    sent: number;\n}\n\nexport class SMSCStatCollector {\n\n    stats: any;\n    request: any;\n    name: string;\n    url: string;\n\n    constructor() {\n        this.request = request;\n    }\n\n    async loadXML(data: string): Promise<any> {\n        return await (<any>xml2js).parseStringAsync(data.toString());\n    }\n\n    async getXMLFromURL(url:string): Promise<any> {\n        let res = await this.request({\n            url: url,\n            timeout: 3000\n        });\n\n        return res;\n    }\n    async getStats(url: string): Promise<SMSCStat> {\n        let xml:any = await this.getXMLFromURL(url);\n        let stats = await this.loadXML(xml);\n        return {\n            smsOutboundRate: this.getSmsOutboundRate(stats),\n            smsInboundRate: this.getSmsInboundRate(stats),\n            dlrOutboundRate: this.getDlrOutboundRate(stats),\n            dlrInboundRate: this.getDlrInboundRate(stats),\n            bindsOnline: this.getOnlineBinds(stats),\n            queueLength: this.getQueueLength(stats),\n            sent: this.getSent(stats)\n        }\n    }\n\n\n    getSmsOutboundRate(stats: any):number {\n        if(!stats) {\n            return 0;\n        }\n\n        let res = stats.gateway.sms[0].outbound[0].split(',')[0];\n\n        return parseFloat(res);\n\n    }\n\n    getSmsInboundRate(stats: any):number {\n\n        if(!stats) {\n            return 0;\n        }\n\n        let res = stats.gateway.sms[0].inbound[0].split(',')[0];\n\n        return parseFloat(res);\n\n    }\n\n    getDlrOutboundRate(stats: any):number {\n        if(!stats) {\n            return 0;\n        }\n\n        let res = stats.gateway.dlr[0].outbound[0].split(',')[0];\n\n        return parseFloat(res);\n\n    }\n\n    getDlrInboundRate(stats: any):number {\n        if(!stats) {\n            return 0;\n        }\n\n        let res = stats.gateway.dlr[0].inbound[0].split(',')[0];\n\n        return parseFloat(res);\n\n    }\n\n\n\n    getQueueLength(stats:any): number  {\n        if(!stats) {\n           return 1;\n        }\n\n        if(stats.gateway.sms[0].storesize[0] == 0) {\n            return 0;\n        }\n        return parseInt(stats.gateway.sms[0].storesize[0]);\n    }\n\n    getSent(stats: any): number {\n        if(!stats) {\n            return 0;\n        }\n        return parseInt(stats.gateway.sms[0].sent[0].total[0]);\n    }\n\n    getOnlineBinds(stats:any): number {\n        if(!stats) {\n            return 0;\n        }\n        let smscs = stats.gateway.smscs[0].smsc;\n        let online = 0;\n        _.each(smscs, (smsc, key) => {\n            let status = smsc.status[0].match(/online/);\n            if(status) {\n                online++;\n            }\n        });\n        return online;\n    }\n}"]}