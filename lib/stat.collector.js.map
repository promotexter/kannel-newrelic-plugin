{"version":3,"file":"stat.collector.js","sourceRoot":"","sources":["stat.collector.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as influx from 'influx';\nimport * as os from 'os';\nimport {IClusterConfig} from \"influx\";\nimport moment = require(\"moment\");\nrequire('dotenv').config();\n\nexport interface StatCollectorMeasurement {\n    measurement: string;\n    tags: any,\n    fields: any,\n    timestamp: Date\n}\n\nexport class StatCollector {\n    private static instance: StatCollector;\n\n    points: StatCollectorMeasurement[];\n    pointsAggregated: any;\n    influx: influx.InfluxDB;\n    interval: any;\n    private ready: boolean;\n\n    private constructor() {\n        this.points = [];\n        this.pointsAggregated = {};\n        let connectionString = process.env.INFLUXDB_STRING;\n        this.influx = new influx.InfluxDB(connectionString);\n        this.run();\n    }\n\n    static getInstance() {\n        if (!StatCollector.instance) {\n            StatCollector.instance = new StatCollector();\n        }\n        return StatCollector.instance;\n    }\n\n    static stopInstance() {\n        StatCollector.instance.stop();\n    }\n\n    run() {\n        this.interval = setInterval(async () => {\n            if (this.ready)\n                await this.reportMeasurements();\n        }, 1000);\n\n        return this.influx.getDatabaseNames()\n            .then(names => {\n                let DBNAME = process.env.INFLUXDB_STRING.split('/').pop();\n                console.log('names.indexOf(process.env.INFLUXDB_DATABASE_NAME)', names.indexOf(DBNAME));\n                if (names.indexOf(DBNAME) === -1) {\n                    console.log('create database', DBNAME);\n                    return this.influx.createDatabase(DBNAME);\n                }\n            })\n            .then(() => {\n                this.ready = true;\n            });\n    }\n\n    stop() {\n        if (this.interval) {\n            clearInterval(this.interval);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n    createKeyFromMeasurement(m) {\n        let mClone = _.clone(m);\n        mClone.timestamp = moment(mClone.timestamp).format('YYYYMMDDHHmmss');\n        delete mClone.fields;\n        return JSON.stringify(mClone);\n    }\n\n    prepMeasurement(m:StatCollectorMeasurement): StatCollectorMeasurement {\n        _.each(m.fields, (v, k) => {\n            m.fields[k + \"_min\"] = v < Number.MAX_SAFE_INTEGER ? v : Number.MAX_SAFE_INTEGER;\n            m.fields[k + \"_max\"] = v;\n            m.fields[k + \"_sum\"] = v;\n            m.fields[k + \"_count\"] = 1;\n            m.fields[k + \"_average\"] = v;\n        });\n        return m;\n    }\n    pushAndAggregate(m: StatCollectorMeasurement): void {\n        let key = this.createKeyFromMeasurement(m);\n        if(this.pointsAggregated[key]) {\n            _.each(m.fields, (v, k) => {\n                this.pointsAggregated[key].fields[k + \"_min\"] = this.pointsAggregated[key].fields[k + \"_min\"] < v ? this.pointsAggregated[key].fields[k + \"_min\"]: v;\n                this.pointsAggregated[key].fields[k + \"_max\"] = this.pointsAggregated[key].fields[k + \"_max\"] > v ? this.pointsAggregated[key].fields[k + \"_max\"]: v;\n                this.pointsAggregated[key].fields[k + \"_sum\"] = this.pointsAggregated[key].fields[k + \"_sum\"]  + v;\n                this.pointsAggregated[key].fields[k + \"_count\"] = this.pointsAggregated[key].fields[k + \"_count\"] + 1;\n                this.pointsAggregated[key].fields[k + \"_average\"] = this.pointsAggregated[key].fields[k + \"_sum\"]/this.pointsAggregated[key].fields[k + \"_count\"]\n            })\n        } else {\n            this.pointsAggregated[key] = this.prepMeasurement(m);\n        }\n    }\n\n    add(measurement: string, values: any, additionalTags?: any, timestamp?: Date) {\n        let defaultTags = {host: os.hostname()};\n\n        let m: StatCollectorMeasurement = {\n            measurement: measurement,\n            tags: _.merge(defaultTags, additionalTags),\n            fields: values,\n            timestamp: timestamp || new Date()\n        };\n\n        this.points.push(m);\n    }\n\n    addOrionHealth(source: string, destination: string, success: boolean) {\n        this.add('orion.health', {\n            success: success ? 1: 0,\n            error: success ? 0 : 1,\n        }, {\n            source: source,\n            destination: destination,\n            region: process.env.AWS_REGION\n        });\n    }\n\n    async reportMeasurements(): Promise<void>{\n        if (this.points.length)\n        {\n            let measurements = this.points.splice(0, Math.min(this.points.length, 10000));\n            _.each(measurements, (m) => {\n                this.pushAndAggregate(m);\n            });\n\n            // console.log('writing measurements', (<any>Object).values(this.pointsAggregated));\n\n            try {\n                await this.influx.writePoints((<any>Object).values(this.pointsAggregated));\n                this.pointsAggregated = {};\n\n            } catch (e) {\n                console.log('failed reporting measurements', e.message);\n            }\n\n\n        }\n    }\n}"]}