{"version":3,"file":"smsc.statcollection.agent.spec.js","sourceRoot":"","sources":["smsc.statcollection.agent.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,2EAAoE;AACpE,qCAAqC;AACrC,IAAI,EAAE,GAAI,OAAO,CAAC,IAAI,CAAC,CAAC;AACxB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;AAG1B,QAAQ,CAAC,yBAAyB,EAAE;IAChC,QAAQ,CAAC,UAAU,EAAG;QAClB,EAAE,CAAC,0CAA0C,EAAE;YAE3C,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,oBAAoB,CAAC;YAGzC,IAAI,eAAe,GAAG,IAAI,mDAAuB,EAAE,CAAC;YACpD,IAAI,KAAK,GAAG,MAAM,eAAe,CAAC,QAAQ,EAAE,CAAC;YAE7C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAExD,CAAC,CAAA,CAAC,CAAA;IAEN,CAAC,CAAC,CAAA;IAGF,QAAQ,CAAC,MAAM,EAAG;QACd,EAAE,CAAC,uCAAuC,EAAE;YAExC,IAAI,CAAC,kBAAkB,CAAC;iBACnB,GAAG,CAAC,SAAS,CAAC;iBACd,KAAK,CAAC,GAAG,EAAE,MAAM,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC;YAGzD,IAAI,UAAU,GAAG;gBACb,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC;oBACT,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC,CAAA,CAAC;aACL,CAAC;YAGF,IAAI,eAAe,GAAG,IAAI,mDAAuB,EAAE,CAAC;YAC9C,eAAe,CAAC,QAAS,GAAG,UAAU,CAAC;YAC7C,MAAM,eAAe,CAAC,IAAI,CAAC;gBACvB,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,yBAAyB;aACtC,CAAC,CAAC;YAGH,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YACnE,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAC,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC,CAAC;YAGhF,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACrE,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAC,aAAa,EAAE,CAAC,EAAC,CAAC,CAAC;QAExE,CAAC,CAAA,CAAC,CAAA;IAEN,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAC","sourcesContent":["import {SmscStatcollectionAgent} from \"./smsc.statcollection.agent\";\nimport * as Bluebird from 'bluebird';\nvar fs =  require('fs');\nvar nock = require('nock');\nBluebird.promisifyAll(fs);\n\n\ndescribe(\"SMSCStatCollectionAgent\", () => {\n    describe(\"getSMSCS\",  () => {\n        it(\"should return the correct number of smsc\", async () => {\n\n            process.env.SMSCS = 'test/urls.test.txt';\n\n\n            let collectionAgent = new SmscStatcollectionAgent();\n            let smscs = await collectionAgent.getSMSCS();\n\n            expect(smscs.length).toBe(2);\n            expect(smscs[0].name).toBe('tata');\n            expect(smscs[1].adminURL).toBe('http://google.com');\n\n        })\n\n    })\n\n\n    describe(\"poll\",  () => {\n        it(\"should poll and get the correct stats\", async () => {\n\n            nock('http://localhost')\n                .get('/my.xml')\n                .reply(200, await fs.readFileAsync('test/smsc.xml'));\n\n\n            let statSender = {\n                add: jest.fn(async () => {\n                    return null;\n                })\n            };\n\n\n            let collectionAgent = new SmscStatcollectionAgent();\n            (<any>collectionAgent.reporter) = statSender;\n            await collectionAgent.poll({\n                name: 'tata',\n                adminURL: 'http://localhost/my.xml'\n            });\n\n\n            expect(statSender.add).toHaveBeenCalledTimes(2);\n            expect(statSender.add.mock.calls[0][0]).toBe('gallium.kannel.sms');\n            expect(statSender.add.mock.calls[0][1]).toEqual({\"queued\": 15, \"sent\": 240716});\n\n\n            expect(statSender.add.mock.calls[1][0]).toBe('gallium.kannel.binds');\n            expect(statSender.add.mock.calls[1][1]).toEqual({\"bindsOnline\": 8});\n\n        })\n\n    })\n});"]}