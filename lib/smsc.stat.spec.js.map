{"version":3,"file":"smsc.stat.spec.js","sourceRoot":"","sources":["smsc.stat.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,2CAA8C;AAC9C,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAEnC,IAAI,EAAE,GAAI,OAAO,CAAC,IAAI,CAAC,CAAC;AACxB,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;AAG1B,QAAQ,CAAC,UAAU,EAAE;IAEjB,QAAQ,CAAC,eAAe,EAAE;QACtB,EAAE,CAAC,0BAA0B,EAAE;YAC3B,IAAI,CAAC,kBAAkB,CAAC;iBACnB,GAAG,CAAC,SAAS,CAAC;iBACd,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;YAE5B,IAAI,OAAO,GAAG,IAAI,6BAAiB,EAAE,CAAC;YACtC,MAAM,CAAC,MAAM,OAAO,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpF,CAAC,CAAA,CAAC,CAAA;IACN,CAAC,CAAC,CAAC;IAGH,QAAQ,CAAC,UAAU,EAAE;QACjB,EAAE,CAAC,0BAA0B,EAAE;YAC3B,IAAI,CAAC,kBAAkB,CAAC;iBACnB,GAAG,CAAC,SAAS,CAAC;iBACd,KAAK,CAAC,GAAG,EAAE,MAAM,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC;YAEzD,IAAI,OAAO,GAAG,IAAI,6BAAiB,EAAE,CAAC;YACtC,IAAI,KAAK,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,yBAAyB,CAAC,CAAA;YAG7D,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC,CAAA,CAAC,CAAA;IAEN,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAC","sourcesContent":["import {SMSCStatCollector} from './smsc.stat';\nvar nock = require('nock');\nvar Bluebird = require('bluebird');\n\nvar fs =  require('fs');\nBluebird.promisifyAll(fs);\n\n\ndescribe('SMSCStat', () => {\n\n    describe(\"getXMLFromURL\", () => {\n        it(\"should load xml from url\", async () => {\n            nock('http://localhost')\n                .get('/my.xml')\n                .reply(200, '<>xml</>');\n\n            let statter = new SMSCStatCollector();\n            expect(await statter.getXMLFromURL('http://localhost/my.xml')).toBe('<>xml</>');\n        })\n    });\n\n\n    describe(\"getStats\", () => {\n        it(\"should load xml from url\", async () => {\n            nock('http://localhost')\n                .get('/my.xml')\n                .reply(200, await fs.readFileAsync('test/smsc.xml'));\n\n            let statter = new SMSCStatCollector();\n            let stats = await statter.getStats('http://localhost/my.xml')\n\n\n            expect(stats.smsOutboundRate).toBe(9.47);\n            expect(stats.smsInboundRate).toBe(1.27);\n            expect(stats.dlrInboundRate).toBe(18.73);\n            expect(stats.dlrOutboundRate).toBe(1.32);\n            expect(stats.queueLength).toBe(15);\n            expect(stats.bindsOnline).toBe(8);\n            expect(stats.sent).toBe(240716);\n        })\n\n    })\n});\n"]}